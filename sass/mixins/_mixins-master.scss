// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
	font-size: ($sizeValue * 18) * 1px;
	font-size: $sizeValue * 1.15rem;
}

// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

@mixin centering {
	position: absolute;
  left: 50%;
	top: 50%;
	transform: translate(-50%, -50%);
}

@mixin absolute {
	position: absolute;
	top: 0;
	left: 0;
	bottom: 0;
	right: 0;
}

@mixin full-bleed {
	position: relative;
	width: 100vw;
	margin-left: -1em;
	overflow: hidden;
	
	@media screen and (min-width: $bp__md) {
		// margin-top: 1.5em;
		margin-left: 50%;
		transform: translateX(-50%);
		// height: calc(100vh - 55px);
	}
}

@mixin theme-wrapper($width: $size__max-width) {
	max-width: $width;
  width: 100%;
  margin-left: auto;
	margin-right: auto;
	padding-left: 1rem;
	padding-right: 1rem;
}

@mixin theme-width {
	padding-left: 1em;
	padding-right: 1em;

	@media screen and (min-width: $bp__md) {
    padding-left: 10%;
		padding-right: 10%;
	}
}

//Transition default
@mixin transition($dur: $base-duration, $prop: all, $ease: ease-in-out) {
	transition: $dur $prop $ease;
}

// Placeholders Content
@mixin placeholder-content($bg-color: #ced4da, $animation: placeholder-animation, $duration: 1s, $gradient: #fff, $padding: false) {
	&:before {
		content: '';
		background-color: $bg-color;
		position: absolute;
		left: 0;
		width: 100%;
		height: 100%;
		@if $padding == true {
			width: 80%;
			left: 50%;
			transform: translateX(-50%);
		}
		z-index: 10;
	}

	&:after {
		content: '';
		position: absolute;
		top: 0;
		right: 0;
		bottom: 0;
		left: 50%;
		z-index: 11;
		width: 500%;
		height: 100%;
		margin-left: -250%;
		animation: $animation $duration linear infinite;
		background: linear-gradient(to right, rgba($gradient, 0) 46%, rgba($gradient, .35) 50%, rgba($gradient, 0) 54%) 50% 50%;
	}
}

// Clearfix
@mixin clearfix() {
	content: "";
	display: table;
	table-layout: fixed;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
	clear: both;
}

// Column width with margin
@mixin column-width($numberColumns: 3) {
	width: map-get( $columns, $numberColumns ) - ( ( $columns__margin * ( $numberColumns - 1 ) ) / $numberColumns );
}

@import "fluid-typography";